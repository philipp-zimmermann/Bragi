#ifndef _MARS_LOGGING_
#define _MARS_LOGGING_

// clang-format off
#include "LoggingTypes.h"            // defines types used for marsLogging
#include "LoggingComponentConfig.h"  // defines global/component-wide levels and enables
#include "Logger.h"                  // implementation for the marsLogging functionalities
#include "LoggingUtilityMacros.h"    // defines _ML_MACRO_CHOOSER and its dependencies
// clang-format on

//––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
// PREREQUISITE FOR LOG_ MACROS
//––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
/**
 * @brief defines the function log_message() on which the LOG_ macros depend.
 *    Usage: MARSLOGGINING_INIT([ClassName[, compConfig_<compName>]])
 *
 * @details
 * This is intended to be used in multiple different scopes.
 * Multiple calls within nested scopes are valid.
 *
 * Depending on the passed arguments the marsLogging behaviour for the current namespace
 * is configured. Following three variants are valid:
 *
 *   1. MARSLOGGINING_INIT()
 *          -> no [<sourceClass>] prefix for any printed messages.
 *          -> Global level and enable determine whether logged messages are printed.
 *
 *   2. MARSLOGGINING_INIT(<ClassName>)
 *          -> [<ClassName>] is prefixed for all printed messages
 *          -> Global level and enable determine whether logged messages are printed.
 *
 *   3. MARSLOGGINING_INIT(<ClassName>, <ComponentConfig>)
 *          -> [<ClassName>] is prefixed for all printed messages.
 *          -> Global enable && local enable determine whether logging is eanabled.
 *          -> Local level determines the printed message level.
 *             This overrides the global value
 *          NOTE: * <ComponentConfig> has to be of type marsLogging::ComponentConfig
 *                * an initializer list is _NOT_ valid here!
 *                  This breaks the variadic argument expansion.
 * prefixed to each message
 */
#define MARSLOGGINING_INIT(...) _ML_MACRO_CHOOSER(__VA_ARGS__)(__VA_ARGS__)


//––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
// LOG_ MACROS
//––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
// These macros are convenience wrappers around the log_message() function. They call the
// first function found via unqualified name lookup.

#define LOG_TRACE log_message<marsLogging::LogLevel::trace>()
#define LOG_DEBUG log_message<marsLogging::LogLevel::debug>()
#define LOG_EVAL log_message<marsLogging::LogLevel::eval>()
#define LOG_INFO log_message<marsLogging::LogLevel::info>()
#define LOG_WARN log_message<marsLogging::LogLevel::warn>()
#define LOG_ERROR log_message<marsLogging::LogLevel::error>()
#define LOG_DEV log_message<marsLogging::LogLevel::dev>()

// @brief logs a message with the passed level and prepends function and line information
// @param enum_level the _bare_ member names of marsLogging::LogLevel.
#define LOG_FUNC_DETAIL(enum_level)                \
  log_message<marsLogging::LogLevel::enum_level>() \
      << __FUNCTION__ << ':' << __LINE__ << ": "

// @brief logs a message with a custom message level
// @param msgLevel of type uint8_t
#define LOG_CUSTOM(int_level) log_message<static_cast<marsLogging::LogLevel>(int_level)>()


//––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
// RUNTIME CONFIGURATION FOR COMPILATION UNIT
//––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
namespace marsLogging {
/**
 * @brief Runtime compilation-unit-wide configuration for the marsLogging framework.
 *
 * This should be called once, before any LOG_ macro is executed (In detail: before any
 * marsLogging::Logger instance is created). When this function is not called, the default
 * value is used as defined by marsLogging::getLogWriter(), which is: {{"type",
 * "std_cerr"},{"color", ""}}
 *
 * See 0_globalConfig_and_coreConcept.cpp for all other valid configurations.
 * If the invalid config is provided, the system uses an empty logger and prints nothing.
 *
 * @param config std::unordered_map<std::string, std::string>
 */
inline void configureLogging(const LoggingConfig& config) { getLogWriter(config); }
}  // namespace marsLogging

#endif  // _MARS_LOGGING_
